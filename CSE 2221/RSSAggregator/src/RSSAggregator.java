import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Arun Ghimire
 *
 */
public final class RSSAggregator {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSAggregator() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        int titleIndex = getChildElement(channel, "title");
        String title = "Empty Title";
        if (titleIndex != -1) {
            title = channel.child(titleIndex).child(0).label();
        }

        int descriptionIndex = getChildElement(channel, "description");
        String description = "Empty Description";
        if (descriptionIndex != -1) {
            description = channel.child(descriptionIndex).child(0).label();
        }

        int linkIndex = getChildElement(channel, "link");
        String link = channel.child(linkIndex).child(0).label();

        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + title + "</title> ");
        out.println("</head>");

        out.println("<body>");
        out.println("<h1><a href=\"" + link + "\">" + title + "</a></h1>");
        out.println("<p>" + description + "</p>");

        out.println("<table border = \"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("</table>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        boolean search = true;
        int child = -1;
        int i = 0;
        if (xml.isTag()) {
            while (i < xml.numberOfChildren() && search) {
                if (xml.child(i).label().equals(tag)) {
                    child = i;
                    search = false;
                }
                i++;
            }
        }
        return child;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item")
                : "" + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        String date = "No date available";
        int dateIndex = getChildElement(item, "pubDate");
        if (dateIndex != -1) {
            date = item.child(dateIndex).child(0).label();
        }

        String source = "No source available";
        String sourceURL = "No source link available";
        int sourceIndex = getChildElement(item, "source");
        if (sourceIndex != -1) {
            sourceURL = item.child(sourceIndex).attributeValue("url");
            if (item.child(sourceIndex).numberOfChildren() > 0) {
                source = "<a href=\"" + sourceURL + "\">"
                        + item.child(sourceIndex).child(0).label() + "</a>";
            } else {
                source = "<a href=\"" + sourceURL + "\">" + sourceURL + "</a>";
            }
        }

        String title = "No title available";
        int titleIndex = getChildElement(item, "title");
        if (titleIndex != -1) {
            if (item.child(titleIndex).numberOfChildren() > 0) {
                title = item.child(titleIndex).child(0).label();
            }

        }

        String description = "No description available";
        int descriptionIndex = getChildElement(item, "description");
        if (descriptionIndex != -1) {
            if (item.child(descriptionIndex).numberOfChildren() > 0) {
                description = item.child(descriptionIndex).child(0).label();
            }

        }

        String link = "No link available";
        int linkIndex = getChildElement(item, "link");
        if (linkIndex != -1) {
            link = item.child(linkIndex).child(0).label();
        }

        if (title.equals("No title available")) {
            title = description;
        }

        out.println("<tr>");
        out.println("<td>" + date + "</td>");
        out.println("<td>" + source + "</td>");
        out.println("<td><a href=\"" + link + "\">" + title + "</a></td>");
        out.println("</tr>");

    }

    /**
     * Processes one XML RSS (version 2.0) feed from a given URL converting it
     * into the corresponding HTML output file.
     *
     * @param url
     *            the URL of the RSS feed
     * @param file
     *            the name of the HTML output file
     * @param out
     *            the output stream to report progress or errors
     * @updates out.content
     * @requires out.is_open
     * @ensures <pre>
     * [reads RSS feed from url, saves HTML document with table of news items
     *   to file, appends to out.content any needed messages]
     * </pre>
     */
    private static void processFeed(String url, String file, SimpleWriter out) {
        XMLTree feeds = new XMLTree1(url);
        SimpleWriter index = new SimpleWriter1L(file);

        if (feeds.label().equals("feeds") && feeds.hasAttribute("title")) {
            index.println("<html>");
            index.println("<head><title>Index Page</title></head>");
            index.println("<body>");
            index.println("<h1 >" + feeds.attributeValue("title") + "</h1>");
            index.println("<ul>");

            int i = 0;
            while (i < feeds.numberOfChildren()) {
                XMLTree feed = feeds.child(i);

                if (feed.label().equals("feed")) {
                    String link = feed.attributeValue("url");
                    XMLTree xml = new XMLTree1(link);

                    if (xml.label().equals("rss") && xml.hasAttribute("version")
                            && xml.attributeValue("version").equals("2.0")) {

                        XMLTree channel = xml.child(0);
                        String fileName = feed.attributeValue("file");
                        String feedName = feed.attributeValue("name");
                        SimpleWriter htmlOut = new SimpleWriter1L(fileName);
                        outputHeader(channel, htmlOut);

                        int j = 0;
                        while (j < channel.numberOfChildren()) {
                            if (channel.child(j).label().equals("item")) {
                                processItem(channel.child(j), htmlOut);
                            }
                            j++;
                        }

                        index.println("<li><a href=\"" + fileName + "\">"
                                + feedName + "</a></li>");
                        outputFooter(htmlOut);
                        htmlOut.close();
                    } else {
                        out.println("This is not an RSS 2.0 file.");
                    }
                }
                i++;
            }
            index.println("</ul>");
            index.println("</body>");
            index.println("</html>");

        } else {
            out.println("There are no feeds");
        }
        index.close();
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Enter feed url: ");
        String url = in.nextLine();
        out.print("Enter file name: ");
        String file = in.nextLine();
        processFeed(url, file, out);

        in.close();
        out.close();
    }
}
